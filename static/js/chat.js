/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let chatUpdateInterval;
let chatListUpdateInterval;
let activeChatlUpdateInterval;
let currentChatId = null;
let lastMessageId = null;
let lastUpdateTime = null;
let cachedChats = [];
let isFirstLoad = true;
let isUpdatingChats = false;
let isUpdatingMessages = false;
let lastUserActivity = Date.now();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–∞—Ç–∞
function initChatComponent() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–∞—Ç–∞...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    startChatUpdates();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.addEventListener('mousemove', updateUserActivity);
    document.addEventListener('keypress', updateUserActivity);
    document.addEventListener('click', updateUserActivity);
    document.addEventListener('touchstart', updateUserActivity);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(checkUserActivity, 30000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageBtn = document.getElementById('send-message-btn');
    if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', sendMessage);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter)
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const attachFileBtn = document.getElementById('attach-file');
    if (attachFileBtn) {
        attachFileBtn.addEventListener('click', function() {
            document.getElementById('file-input').click();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const fileInput = document.getElementById('file-input');
    if (fileInput) {
        fileInput.addEventListener('change', handleSelectedFile);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ —á–∞—Ç–µ
    const backToChatsBtn = document.getElementById('back-to-chats');
    if (backToChatsBtn) {
        backToChatsBtn.addEventListener('click', function() {
            hideChat();
            showMainContent();
        });
    }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
function startChatUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    updateChatsList();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ - –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (1 —Å–µ–∫—É–Ω–¥–∞)
    chatListUpdateInterval = setInterval(updateChatsList, 1000);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', function() {
        if (chatListUpdateInterval) clearInterval(chatListUpdateInterval);
        if (activeChatlUpdateInterval) clearInterval(activeChatlUpdateInterval);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    document.addEventListener('visibilitychange', function() {
        if (document.visibilityState === 'visible') {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            updateChatsList();
            if (currentChatId) {
                updateCurrentChatMessages();
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function updateChatsList() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (isUpdatingChats) return;
    isUpdatingChats = true;
    
    try {
        const response = await fetch('/api/chats');
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
        }
        
        const data = await response.json();
        
        if (data.success) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
            if (isFirstLoad || hasChatsChanged(cachedChats, data.chats)) {
                renderChatsList(data.chats);
                cachedChats = data.chats;
                isFirstLoad = false;
            }
            
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if (currentChatId) {
                updateCurrentChatMessages();
            }
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:', data.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
    } finally {
        isUpdatingChats = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
function hasChatsChanged(oldChats, newChats) {
    if (oldChats.length !== newChats.length) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
    for (let i = 0; i < newChats.length; i++) {
        const oldChat = oldChats.find(c => c.id === newChats[i].id);
        if (!oldChat) return true;
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è
        if (oldChat.last_message !== newChats[i].last_message ||
            oldChat.last_message_time !== newChats[i].last_message_time) {
            return true;
        }
    }
    
    return false;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function renderChatsList(chats) {
    const chatListContainer = document.querySelector('.chat-list');
    if (!chatListContainer) return;
    
    if (chats.length === 0) {
        chatListContainer.innerHTML = `<div class="no-chats">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>`;
        return;
    }
    
    let chatsHTML = '';
    
    chats.forEach(chat => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const lastMessageTime = chat.last_message_time ? formatMessageTime(new Date(chat.last_message_time)) : '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —á–∞—Ç–∞ (–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥)
        const chatIcon = chat.type === 'group' ? 'üë•' : 'üë§';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞
        const avatarUrl = chat.type === 'group' 
            ? `/api/chat/group_photo/${chat.group_id}` 
            : `/api/user/photo/${chat.participant_id}`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
        chatsHTML += `
            <div class="chat-item" data-chat-id="${chat.id}" data-chat-type="${chat.type}">
                <div class="chat-avatar">
                    <img src="${avatarUrl}" onerror="this.src='/static/images/avatar.png'" alt="${chat.name}">
                </div>
                <div class="chat-info">
                    <div class="chat-header">
                        <span class="chat-name">${chat.name}</span>
                        <span class="chat-time">${lastMessageTime}</span>
                    </div>
                    <div class="chat-message">${chat.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                </div>
            </div>
        `;
    });
    
    chatListContainer.innerHTML = chatsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ —á–∞—Ç–∞–º
    document.querySelectorAll('.chat-item').forEach(chatItem => {
        chatItem.addEventListener('click', function() {
            const chatId = this.dataset.chatId;
            const chatType = this.dataset.chatType;
            const chatName = this.querySelector('.chat-name').textContent;
            
            openChat(chatId, chatType, chatName);
        });
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessageTime(date) {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    if (date >= today) {
        // –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else if (date >= yesterday) {
        // –í—á–µ—Ä–∞
        return '–í—á–µ—Ä–∞';
    } else {
        // –î—Ä—É–≥–∏–µ –¥–∞—Ç—ã
        return date.toLocaleDateString();
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function openChat(chatId, chatType, chatName) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    currentChatId = chatId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ localStorage
    localStorage.setItem('lastChatId', chatId);
    localStorage.setItem('lastChatType', chatType);
    localStorage.setItem('lastChatName', chatName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    document.querySelector('.chat-header-title').textContent = chatName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —á–∞—Ç–∞
    const chatAvatar = document.getElementById('chat-avatar');
    if (chatAvatar) {
        const avatarUrl = chatType === 'group' 
            ? `/api/chat/group_photo/${chatId}` 
            : `/api/user/photo/${chatId}`;
        chatAvatar.src = avatarUrl;
        chatAvatar.onerror = function() {
            this.src = '/static/images/avatar.png';
        };
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
    hideWelcomeScreen();
    showChat();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadChatMessages(chatId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫ —Ñ–æ—Ä–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('message-form').dataset.chatId = chatId;
    document.getElementById('message-form').dataset.chatType = chatType;
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    if (window.innerWidth <= 768) {
        document.querySelector('.sidebar').classList.remove('visible');
    }
    
    // –î–µ–ª–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    document.body.classList.add('chat-active');
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('message-input').focus();
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID —á–∞—Ç–∞
function getCurrentChatId() {
    return currentChatId;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
function closeCurrentChat() {
    currentChatId = null;
    lastMessageId = null;
    document.querySelector('.messages-container').innerHTML = '<div class="no-chat-selected">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</div>';
    document.querySelector('.chat-header-title').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
    document.getElementById('chat-avatar').src = '/static/images/avatar.png';
    showWelcomeScreen();
    document.body.classList.remove('chat-active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function showWelcomeScreen() {
    const welcomeScreen = document.getElementById('welcome-screen');
    if (welcomeScreen) {
        welcomeScreen.style.display = 'flex';
    }
}

// –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function hideWelcomeScreen() {
    const welcomeScreen = document.getElementById('welcome-screen');
    if (welcomeScreen) {
        welcomeScreen.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
function showChat() {
    const chatInterface = document.getElementById('chat-interface');
    if (chatInterface) {
        chatInterface.style.display = 'flex';
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
function hideChat() {
    showWelcomeScreen();
    closeCurrentChat();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ª–æ–≥–æ—Ç–∏–ø –∏ —Ç.–¥.)
function showMainContent() {
    showWelcomeScreen();
}

// –°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
function hideMainContent() {
    hideWelcomeScreen();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
async function loadChatMessages(chatId, offset = 0) {
    try {
        const messagesContainer = document.querySelector('.messages-container');
        
        if (offset === 0) {
            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            messagesContainer.innerHTML = '<div class="loading-messages">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';
        }
        
        const response = await fetch(`/api/chat/${chatId}/messages?offset=${offset}&limit=20`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
        const data = await response.json();
        
        if (data.success) {
            if (offset === 0) {
                messagesContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.messages.length === 0 && offset === 0) {
                messagesContainer.innerHTML = '<div class="no-messages">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
                return;
            }
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if (data.messages.length > 0) {
                const latestMessage = data.messages[0];
                lastMessageId = latestMessage.id;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messagesHTML = data.messages
                .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                .map(message => createMessageElement(message))
                .join('');
            
            if (offset === 0) {
                messagesContainer.innerHTML = messagesHTML;
            } else {
                // –ü—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = messagesHTML;
                while (tempDiv.firstChild) {
                    messagesContainer.prepend(tempDiv.firstChild);
                }
            }
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (offset === 0) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
            if (data.has_more) {
                const loadMoreBtn = document.createElement('div');
                loadMoreBtn.className = 'load-more-btn';
                loadMoreBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                loadMoreBtn.onclick = () => loadChatMessages(chatId, offset + data.messages.length);
                messagesContainer.prepend(loadMoreBtn);
            }
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.message);
            messagesContainer.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        document.querySelector('.messages-container').innerHTML = 
            '<div class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</div>';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
async function updateCurrentChatMessages() {
    if (!currentChatId || isUpdatingMessages) return;
    
    isUpdatingMessages = true;
    
    try {
        // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç lastMessageId, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        if (!lastMessageId) {
            await loadChatMessages(currentChatId);
            isUpdatingMessages = false;
            return;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const response = await fetch(`/api/chat/${currentChatId}/messages?after_id=${lastMessageId}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        if (!response.ok) {
            if (response.status === 401) {
                // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                console.warn("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
                handleSessionExpired();
                isUpdatingMessages = false;
                return;
            }
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.messages && data.messages.length > 0) {
            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${data.messages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            const messagesContainer = document.querySelector('.messages-container');
            if (!messagesContainer) {
                console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                isUpdatingMessages = false;
                return;
            }
            
            const atBottom = isScrolledToBottom(messagesContainer);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const messageIds = data.messages.map(m => m.id).filter(id => typeof id === 'number');
            if (messageIds.length > 0) {
                const maxId = Math.max(...messageIds);
                if (maxId > lastMessageId) {
                    lastMessageId = maxId;
                    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω lastMessageId: ${lastMessageId}`);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
            data.messages.forEach(message => {
                if (!message.id) {
                    console.warn('–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ID:', message);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DOM
                const existingMessage = document.querySelector(`.message[data-message-id="${message.id}"]`);
                if (!existingMessage) {
                    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    try {
                        const messageHTML = createMessageElement(message);
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = messageHTML;
                        
                        if (tempDiv.firstChild) {
                            messagesContainer.appendChild(tempDiv.firstChild);
                            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id}`);
                        } else {
                            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:`, message);
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error, message);
                    }
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const readStatusElement = existingMessage.querySelector('.message-read-status');
                    if (readStatusElement && message.read_count) {
                        readStatusElement.textContent = '‚úì‚úì';
                        readStatusElement.classList.add('read');
                    }
                }
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω–∏–∑—É —á–∞—Ç–∞, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
            if (atBottom) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else if (data.messages.length > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                showNewMessagesIndicator(data.messages.length);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    } finally {
        isUpdatingMessages = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–∫—Ä—É—á–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∫–æ–Ω—Ü–∞
function isScrolledToBottom(element) {
    const threshold = 50;
    return element.scrollHeight - element.scrollTop - element.clientHeight < threshold;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function createMessageElement(message) {
    if (!message || !message.id) {
        console.error('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        return '';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
    const messageClass = message.is_own ? 'message-own' : 'message-other';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageTime;
    try {
        messageTime = formatMessageTime(new Date(message.timestamp));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', e);
        messageTime = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    const readStatus = message.is_own ? 
        `<span class="message-read-status ${message.read_count ? 'read' : ''}">
            ${message.read_count ? '‚úì‚úì' : '‚úì'}
        </span>` : '';
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageContent = '';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
    if (message.has_media) {
        switch (message.media_type) {
            case 'image':
                messageContent += `<div class="message-media">
                    <img src="/api/chat/media/${message.id}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="media-image">
                </div>`;
                break;
            case 'video':
                messageContent += `<div class="message-media">
                    <video controls class="media-video">
                        <source src="/api/chat/media/${message.id}" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                </div>`;
                break;
            case 'audio':
                messageContent += `<div class="message-media">
                    <audio controls class="media-audio">
                        <source src="/api/chat/media/${message.id}" type="audio/mpeg">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                    </audio>
                </div>`;
                break;
            case 'file':
                messageContent += `<div class="message-media">
                    <a href="/api/chat/media/${message.id}" download class="media-file">
                        üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                    </a>
                </div>`;
                break;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (message.content) {
        messageContent += `<div class="message-text">${message.content}</div>`;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    return `
        <div class="message ${messageClass}" data-message-id="${message.id}">
            <div class="message-content">
                ${messageContent}
                <div class="message-info">
                    <span class="message-time">${messageTime}</span>
                    ${readStatus}
                    ${message.is_edited ? '<span class="message-edited">(–∏–∑–º.)</span>' : ''}
                </div>
            </div>
        </div>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    if (!currentChatId) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    const messageInput = document.getElementById('message-input');
    const fileInput = document.getElementById('file-input');
    
    const messageText = messageInput.value.trim();
    const hasFile = fileInput.files && fileInput.files.length > 0;
    
    if (!messageText && !hasFile) {
        // –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        return;
    }
    
    // –°—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const messageCopy = messageText;
    messageInput.value = '';
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤
    const formData = new FormData();
    formData.append('content', messageCopy);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    if (hasFile) {
        formData.append('media', fileInput.files[0]);
        fileInput.value = '';
        document.querySelector('.selected-file').style.display = 'none';
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        const tempId = `temp-${Date.now()}`;
        const messagesContainer = document.querySelector('.messages-container');
        
        // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const tempMessage = document.createElement('div');
        tempMessage.className = 'message message-own sending';
        tempMessage.dataset.messageId = tempId;
        tempMessage.innerHTML = `
            <div class="message-content">
                <div class="message-text">${messageCopy}</div>
                <div class="message-info">
                    <span class="message-time">–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                    <span class="message-read-status">‚åõ</span>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        messagesContainer.appendChild(tempMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageCopy);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`/api/chat/${currentChatId}/send_message`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        
        if (data.success) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const tempMsgElement = document.querySelector(`[data-message-id="${tempId}"]`);
            
            if (data.message) {
                console.log('–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                
                if (tempMsgElement) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                    tempMsgElement.dataset.messageId = data.message.id;
                    tempMsgElement.classList.remove('sending');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                    const messageInfo = tempMsgElement.querySelector('.message-info');
                    if (messageInfo) {
                        const timeElement = messageInfo.querySelector('.message-time');
                        if (timeElement) {
                            timeElement.textContent = formatMessageTime(new Date(data.message.timestamp));
                        }
                        
                        const readStatusElement = messageInfo.querySelector('.message-read-status');
                        if (readStatusElement) {
                            readStatusElement.textContent = '‚úì';
                        }
                    }
                    
                    // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –º–µ–¥–∏–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    if (data.message.has_media && !tempMsgElement.querySelector('.message-media')) {
                        const messageContent = tempMsgElement.querySelector('.message-content');
                        const messageText = messageContent.querySelector('.message-text');
                        
                        // –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        let mediaHTML = '';
                        switch (data.message.media_type) {
                            case 'image':
                                mediaHTML = `<div class="message-media">
                                    <img src="/api/chat/media/${data.message.id}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="media-image">
                                </div>`;
                                break;
                            case 'video':
                                mediaHTML = `<div class="message-media">
                                    <video controls class="media-video">
                                        <source src="/api/chat/media/${data.message.id}" type="video/mp4">
                                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                                    </video>
                                </div>`;
                                break;
                            case 'audio':
                                mediaHTML = `<div class="message-media">
                                    <audio controls class="media-audio">
                                        <source src="/api/chat/media/${data.message.id}" type="audio/mpeg">
                                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                                    </audio>
                                </div>`;
                                break;
                            case 'file':
                                mediaHTML = `<div class="message-media">
                                    <a href="/api/chat/media/${data.message.id}" download class="media-file">
                                        üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                                    </a>
                                </div>`;
                                break;
                        }
                        
                        if (mediaHTML) {
                            // –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                            if (messageText) {
                                messageText.insertAdjacentHTML('beforebegin', mediaHTML);
                            } else {
                                messageContent.insertAdjacentHTML('afterbegin', mediaHTML);
                            }
                        }
                    }
                } else {
                    // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    const realMessageHTML = createMessageElement(data.message);
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = realMessageHTML;
                    
                    if (tempDiv.firstChild) {
                        messagesContainer.appendChild(tempDiv.firstChild);
                    } else {
                        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId
                if (data.message.id > (lastMessageId || 0)) {
                    lastMessageId = data.message.id;
                    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω lastMessageId: ${lastMessageId}`);
                }
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else {
                console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏');
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–æ —Å–∫–∞–∑–∞–ª —á—Ç–æ —É—Å–ø–µ—Ö,
                // –æ—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —É–±–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–ø—Ä–∞–≤–∫–∏"
                if (tempMsgElement) {
                    tempMsgElement.classList.remove('sending');
                    const readStatusElement = tempMsgElement.querySelector('.message-read-status');
                    if (readStatusElement) {
                        readStatusElement.textContent = '‚úì';
                    }
                    const timeElement = tempMsgElement.querySelector('.message-time');
                    if (timeElement) {
                        timeElement.textContent = formatMessageTime(new Date());
                    }
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => updateChatsList(), 300);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + data.message);
            
            // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫—É
            const tempMsgElement = document.querySelector(`[data-message-id="${tempId}"]`);
            if (tempMsgElement) {
                tempMsgElement.classList.add('error');
                tempMsgElement.querySelector('.message-time').textContent = '–û—à–∏–±–∫–∞';
                tempMsgElement.querySelector('.message-read-status').textContent = '‚ùå';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        messageInput.value = messageCopy;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function showNewMessagesIndicator(count) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    let indicator = document.querySelector('.new-messages-indicator');
    const chatInterface = document.querySelector('.chat-interface');
    
    if (!chatInterface) return;
    
    if (!indicator) {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        indicator = document.createElement('div');
        indicator.className = 'new-messages-indicator';
        indicator.textContent = `${count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Üì`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        indicator.addEventListener('click', function() {
            const messagesContainer = document.querySelector('.messages-container');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                indicator.remove();
            }
        });
        
        chatInterface.appendChild(indicator);
    } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        indicator.textContent = `${count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Üì`;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (indicator && indicator.parentElement) {
            indicator.remove();
        }
    }, 5000);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
function getMediaTypeFromFile(file) {
    if (!file) return null;
    const type = file.type;
    if (type.startsWith('image/')) return 'image';
    if (type.startsWith('video/')) return 'video';
    if (type.startsWith('audio/')) return 'audio';
    return 'file';
}

// –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π
function keepSessionAlive() {
    fetch('/api/ping', { 
        method: 'GET',
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
    }).catch(error => {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏
function handleSessionExpired() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (chatListUpdateInterval) clearInterval(chatListUpdateInterval);
    if (activeChatlUpdateInterval) clearInterval(activeChatlUpdateInterval);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'session-expired';
    notification.innerHTML = `
        <div class="session-message">
            <h3>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</h3>
            <p>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</p>
            <button id="relogin-btn">–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞</button>
        </div>
    `;
    document.body.appendChild(notification);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    document.getElementById('relogin-btn').addEventListener('click', () => {
        window.location.href = '/login';
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        window.location.href = '/login';
    }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function handleSelectedFile() {
    const fileInput = document.getElementById('file-input');
    const selectedFileInfo = document.querySelector('.selected-file');
    
    if (fileInput.files && fileInput.files.length > 0) {
        const file = fileInput.files[0];
        const fileName = file.name;
        const fileSize = formatFileSize(file.size);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        selectedFileInfo.innerHTML = `
            <div class="file-info">
                <span class="file-name">${fileName}</span>
                <span class="file-size">${fileSize}</span>
            </div>
            <button type="button" class="remove-file">‚úñ</button>
        `;
        selectedFileInfo.style.display = 'flex';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        selectedFileInfo.querySelector('.remove-file').addEventListener('click', function() {
            fileInput.value = '';
            selectedFileInfo.style.display = 'none';
        });
    } else {
        selectedFileInfo.style.display = 'none';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' –ë';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' –ö–ë';
    else return (bytes / 1048576).toFixed(2) + ' –ú–ë';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserActivity() {
    lastUserActivity = Date.now();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkUserActivity() {
    const now = Date.now();
    const inactivityThreshold = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    if (now - lastUserActivity > inactivityThreshold) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.chatModule = {
    initChatComponent,
    openChat,
    closeCurrentChat,
    updateChatsList,
    getCurrentChatId,
    updateCurrentChatMessages,
    updateUserActivity,
    keepSessionAlive
};
/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let chatUpdateInterval;
let chatListUpdateInterval;
let activeChatlUpdateInterval;
let currentChatId = null;
let currentChatType = null;
let currentGroupId = null;
let isCurrentUserAdmin = false;
let currentGroupMembers = [];
let lastMessageId = null;
let lastUpdateTime = null;
let cachedChats = [];
let isFirstLoad = true;
let isUpdatingChats = false;
let isUpdatingMessages = false;
let lastUserActivity = Date.now();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–∞—Ç–∞
function initChatComponent() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–∞—Ç–∞...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    startChatUpdates();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.addEventListener('mousemove', updateUserActivity);
    document.addEventListener('keypress', updateUserActivity);
    document.addEventListener('click', updateUserActivity);
    document.addEventListener('touchstart', updateUserActivity);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(checkUserActivity, 30000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageBtn = document.getElementById('send-message-btn');
    if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', sendMessage);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter)
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const attachFileBtn = document.getElementById('attach-file');
    if (attachFileBtn) {
        attachFileBtn.addEventListener('click', function() {
            document.getElementById('file-input').click();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const fileInput = document.getElementById('file-input');
    if (fileInput) {
        fileInput.addEventListener('change', handleSelectedFile);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ —á–∞—Ç–µ
    const backToChatsBtn = document.getElementById('back-to-chats');
    if (backToChatsBtn) {
        backToChatsBtn.addEventListener('click', function() {
            hideChat();
            showMainContent();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä —á–∞—Ç–∞ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π)
    const chatAvatar = document.getElementById('chat-avatar');
    if (chatAvatar) {
        chatAvatar.addEventListener('click', function() {
            if (currentChatType === 'group' && currentGroupId) {
                openGroupInfoModal(currentGroupId);
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
    initGroupInfoModal();
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
function startChatUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    updateChatsList();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ - –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (1 —Å–µ–∫—É–Ω–¥–∞)
    chatListUpdateInterval = setInterval(updateChatsList, 1000);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', function() {
        if (chatListUpdateInterval) clearInterval(chatListUpdateInterval);
        if (activeChatlUpdateInterval) clearInterval(activeChatlUpdateInterval);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    document.addEventListener('visibilitychange', function() {
        if (document.visibilityState === 'visible') {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            updateChatsList();
            if (currentChatId) {
                // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                loadChatMessages(currentChatId);
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function updateChatsList() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (isUpdatingChats) return;
    isUpdatingChats = true;
    
    try {
        const response = await fetch('/api/chats');
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
        }
        
        const data = await response.json();
        
        if (data.success) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
            if (isFirstLoad || hasChatsChanged(cachedChats, data.chats)) {
                renderChatsList(data.chats);
                cachedChats = data.chats;
                isFirstLoad = false;
            }
            
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if (currentChatId) {
                updateCurrentChatMessages();
            }
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:', data.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
    } finally {
        isUpdatingChats = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
function hasChatsChanged(oldChats, newChats) {
    if (oldChats.length !== newChats.length) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
    for (let i = 0; i < newChats.length; i++) {
        const oldChat = oldChats.find(c => c.id === newChats[i].id);
        if (!oldChat) return true;
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è
        if (oldChat.last_message !== newChats[i].last_message ||
            oldChat.last_message_time !== newChats[i].last_message_time) {
            return true;
        }
    }
    
    return false;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function renderChatsList(chats) {
    const chatListContainer = document.querySelector('.chat-list');
    if (!chatListContainer) return;
    
    if (chats.length === 0) {
        chatListContainer.innerHTML = `<div class="no-chats">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>`;
        return;
    }
    
    let chatsHTML = '';
    
    chats.forEach(chat => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const lastMessageTime = chat.last_message_time ? formatMessageTime(new Date(chat.last_message_time)) : '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —á–∞—Ç–∞ (–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –¥–∏–∞–ª–æ–≥)
        const chatIcon = chat.type === 'group' ? 'üë•' : 'üë§';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞
        const avatarUrl = chat.type === 'group' 
            ? `/api/chat/group_photo/${chat.group_id}` 
            : `/api/user/photo/${chat.participant_id}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç group_id –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        const groupIdAttr = chat.type === 'group' ? `data-group-id="${chat.group_id}"` : '';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
        chatsHTML += `
            <div class="chat-item" data-chat-id="${chat.id}" data-chat-type="${chat.type}" ${groupIdAttr}>
                <div class="chat-avatar">
                    <img src="${avatarUrl}" onerror="this.src='/static/images/avatar.png'" alt="${chat.name}">
                </div>
                <div class="chat-info">
                    <div class="chat-header">
                        <span class="chat-name">${chat.name}</span>
                        <span class="chat-time">${lastMessageTime}</span>
                    </div>
                    <div class="chat-message">${chat.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                </div>
            </div>
        `;
    });
    
    chatListContainer.innerHTML = chatsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ —á–∞—Ç–∞–º
    document.querySelectorAll('.chat-item').forEach(chatItem => {
        chatItem.addEventListener('click', function() {
            const chatId = this.dataset.chatId;
            const chatType = this.dataset.chatType;
            const chatName = this.querySelector('.chat-name').textContent;
            const groupId = chatType === 'group' ? this.dataset.groupId : null;
            
            openChat(chatId, chatType, chatName, groupId);
        });
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessageTime(date) {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    if (date >= today) {
        // –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else if (date >= yesterday) {
        // –í—á–µ—Ä–∞
        return '–í—á–µ—Ä–∞';
    } else {
        // –î—Ä—É–≥–∏–µ –¥–∞—Ç—ã
        return date.toLocaleDateString();
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function openChat(chatId, chatType, chatName, groupId = null) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (activeChatlUpdateInterval) {
        clearInterval(activeChatlUpdateInterval);
        activeChatlUpdateInterval = null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    currentChatId = chatId;
    currentChatType = chatType;
    currentGroupId = groupId;
    lastMessageId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ localStorage
    localStorage.setItem('lastChatId', chatId);
    localStorage.setItem('lastChatType', chatType);
    localStorage.setItem('lastChatName', chatName);
    if (groupId) localStorage.setItem('lastGroupId', groupId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    document.querySelector('.chat-header-title').textContent = chatName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —á–∞—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ç–∏–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const chatAvatar = document.getElementById('chat-avatar');
    if (chatAvatar) {
        const timestamp = new Date().getTime();
        const avatarUrl = chatType === 'group' 
            ? `/api/chat/group_photo/${groupId || chatId}?t=${timestamp}` 
            : `/api/user/photo/${chatId}?t=${timestamp}`;
        
        chatAvatar.src = avatarUrl;
        chatAvatar.onerror = function() {
            this.src = '/static/images/avatar.png';
        };
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
    hideWelcomeScreen();
    showChat();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadChatMessages(chatId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫ —Ñ–æ—Ä–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('message-form').dataset.chatId = chatId;
    document.getElementById('message-form').dataset.chatType = chatType;
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    if (window.innerWidth <= 768) {
        document.querySelector('.sidebar').classList.remove('visible');
    }
    
    // –î–µ–ª–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    document.body.classList.add('chat-active');
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('message-input').focus();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    activeChatlUpdateInterval = setInterval(() => {
        updateCurrentChatMessages();
    }, 1000);
    
    // –î–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–∂–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–µ—Ä—Ü–∞–Ω–∏—è –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–π –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        if (currentChatId === chatId) {
            setInterval(() => {
                if (currentChatId === chatId && !isUpdatingMessages) {
                    console.log("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...");
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
                    loadChatMessages(currentChatId, 0, true);
                }
            }, 30000); // –†–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
        }
    }, 10000); // –ü–µ—Ä–≤–æ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    
    console.log("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ID:", chatId);
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID —á–∞—Ç–∞
function getCurrentChatId() {
    return currentChatId;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
function closeCurrentChat() {
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if (activeChatlUpdateInterval) {
        clearInterval(activeChatlUpdateInterval);
        activeChatlUpdateInterval = null;
    }
    
    currentChatId = null;
    lastMessageId = null;
    document.querySelector('.messages-container').innerHTML = '<div class="no-chat-selected">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</div>';
    document.querySelector('.chat-header-title').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
    document.getElementById('chat-avatar').src = '/static/images/avatar.png';
    showWelcomeScreen();
    document.body.classList.remove('chat-active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function showWelcomeScreen() {
    const welcomeScreen = document.getElementById('welcome-screen');
    if (welcomeScreen) {
        welcomeScreen.style.display = 'flex';
    }
}

// –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function hideWelcomeScreen() {
    const welcomeScreen = document.getElementById('welcome-screen');
    if (welcomeScreen) {
        welcomeScreen.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
function showChat() {
    const chatInterface = document.getElementById('chat-interface');
    if (chatInterface) {
        chatInterface.style.display = 'flex';
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
function hideChat() {
    showWelcomeScreen();
    closeCurrentChat();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ª–æ–≥–æ—Ç–∏–ø –∏ —Ç.–¥.)
function showMainContent() {
    showWelcomeScreen();
}

// –°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
function hideMainContent() {
    hideWelcomeScreen();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
async function loadChatMessages(chatId, offset = 0, silentUpdate = false) {
    try {
        const messagesContainer = document.querySelector('.messages-container');
        
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —è–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (offset === 0 && !silentUpdate) {
            messagesContainer.innerHTML = '<div class="loading-messages">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const timestamp = new Date().getTime();
        
        const response = await fetch(`/api/chat/${chatId}/messages?offset=${offset}&limit=50&t=${timestamp}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
        const data = await response.json();
        
        if (data.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const scrollPos = messagesContainer.scrollTop;
            const wasAtBottom = isScrolledToBottom(messagesContainer);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º (–Ω–µ —Ç–∏—Ö–æ–º) –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if ((offset === 0 && !silentUpdate) || !data.messages || data.messages.length === 0) {
                messagesContainer.innerHTML = '';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (data.messages.length === 0 && offset === 0) {
                if (!silentUpdate) {
                    messagesContainer.innerHTML = '<div class="no-messages">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
                }
                return;
            }
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if (data.messages.length > 0) {
                // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º ID
                const messageIds = data.messages.map(m => m.id).filter(id => typeof id === 'number');
                if (messageIds.length > 0) {
                    const maxId = Math.max(...messageIds);
                    // –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                    if (!lastMessageId || maxId > lastMessageId) {
                        lastMessageId = maxId;
                        console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω lastMessageId: ${lastMessageId}`);
                    }
                }
            }
            
            // –ü—Ä–∏ —Ç–∏—Ö–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (silentUpdate) {
                data.messages.forEach(message => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const existingMessage = document.querySelector(`.message[data-message-id="${message.id}"]`);
                    if (!existingMessage) {
                        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        const messageHTML = createMessageElement(message);
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = messageHTML;
                        
                        if (tempDiv.firstChild) {
                            // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ
                            let inserted = false;
                            
                            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp
                            const messageTimestamp = new Date(message.timestamp).getTime();
                            const messages = messagesContainer.querySelectorAll('.message');
                            
                            for (let i = messages.length - 1; i >= 0; i--) {
                                const msg = messages[i];
                                const msgId = parseInt(msg.dataset.messageId);
                                
                                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º
                                if (msgId < message.id) {
                                    msg.after(tempDiv.firstChild);
                                    inserted = true;
                                    break;
                                }
                            }
                            
                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                            if (!inserted) {
                                if (messages.length > 0) {
                                    messagesContainer.appendChild(tempDiv.firstChild);
                                } else {
                                    messagesContainer.innerHTML = messageHTML;
                                }
                            }
                            
                            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id} –ø—Ä–∏ —Ç–∏—Ö–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`);
                        }
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å
                        const readStatusElement = existingMessage.querySelector('.message-read-status');
                        if (readStatusElement && message.read_count) {
                            readStatusElement.textContent = '‚úì‚úì';
                            readStatusElement.classList.add('read');
                        }
                    }
                });
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const messagesHTML = data.messages
                    .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))
                    .map(message => createMessageElement(message))
                    .join('');
                
                if (offset === 0) {
                    messagesContainer.innerHTML = messagesHTML;
                } else {
                    // –ü—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = messagesHTML;
                    while (tempDiv.firstChild) {
                        messagesContainer.prepend(tempDiv.firstChild);
                    }
                }
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if (offset === 0 && !silentUpdate) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else if (silentUpdate) {
                if (wasAtBottom) {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                } else {
                    messagesContainer.scrollTop = scrollPos;
                }
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
            if (data.has_more && offset === 0 && !silentUpdate) {
                const loadMoreBtn = document.createElement('div');
                loadMoreBtn.className = 'load-more-btn';
                loadMoreBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                loadMoreBtn.onclick = () => loadChatMessages(chatId, offset + data.messages.length);
                messagesContainer.prepend(loadMoreBtn);
            }
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.message);
            if (!silentUpdate) {
                messagesContainer.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        if (!silentUpdate) {
            document.querySelector('.messages-container').innerHTML = 
                '<div class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</div>';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
async function updateCurrentChatMessages() {
    if (!currentChatId || isUpdatingMessages) return;
    
    isUpdatingMessages = true;
    
    try {
        // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç lastMessageId, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        if (!lastMessageId) {
            await loadChatMessages(currentChatId);
            isUpdatingMessages = false;
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const timestamp = new Date().getTime();
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const response = await fetch(`/api/chat/${currentChatId}/messages?after_id=${lastMessageId}&t=${timestamp}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        if (!response.ok) {
            if (response.status === 401) {
                // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                console.warn("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
                handleSessionExpired();
                isUpdatingMessages = false;
                return;
            }
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.messages && data.messages.length > 0) {
            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${data.messages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:`, data.messages);
            const messagesContainer = document.querySelector('.messages-container');
            if (!messagesContainer) {
                console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                isUpdatingMessages = false;
                return;
            }
            
            const atBottom = isScrolledToBottom(messagesContainer);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const messageIds = data.messages.map(m => m.id).filter(id => typeof id === 'number');
            if (messageIds.length > 0) {
                const maxId = Math.max(...messageIds);
                if (maxId > lastMessageId) {
                    lastMessageId = maxId;
                    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω lastMessageId: ${lastMessageId}`);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
            data.messages.forEach(message => {
                if (!message.id) {
                    console.warn('–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ID:', message);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DOM
                const existingMessage = document.querySelector(`.message[data-message-id="${message.id}"]`);
                if (!existingMessage) {
                    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    try {
                        const messageHTML = createMessageElement(message);
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = messageHTML;
                        
                        if (tempDiv.firstChild) {
                            messagesContainer.appendChild(tempDiv.firstChild);
                            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id}`);
                        } else {
                            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:`, message);
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error, message);
                    }
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const readStatusElement = existingMessage.querySelector('.message-read-status');
                    if (readStatusElement && message.read_count) {
                        readStatusElement.textContent = '‚úì‚úì';
                        readStatusElement.classList.add('read');
                    }
                }
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω–∏–∑—É —á–∞—Ç–∞, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
            if (atBottom) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else if (data.messages.length > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                showNewMessagesIndicator(data.messages.length);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    } finally {
        isUpdatingMessages = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–∫—Ä—É—á–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∫–æ–Ω—Ü–∞
function isScrolledToBottom(element) {
    const threshold = 50;
    return element.scrollHeight - element.scrollTop - element.clientHeight < threshold;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function createMessageElement(message) {
    if (!message || !message.id) {
        console.error('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        return '';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
    const messageClass = message.is_own ? 'message-own' : 'message-other';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageTime;
    try {
        messageTime = formatMessageTime(new Date(message.timestamp));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', e);
        messageTime = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    const readStatus = message.is_own ? 
        `<span class="message-read-status ${message.read_count ? 'read' : ''}">
            ${message.read_count ? '‚úì‚úì' : '‚úì'}
        </span>` : '';
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageContent = '';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
    if (message.has_media) {
        switch (message.media_type) {
            case 'image':
                messageContent += `<div class="message-media">
                    <img src="/api/chat/media/${message.id}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="media-image">
                </div>`;
                break;
            case 'video':
                messageContent += `<div class="message-media">
                    <video controls class="media-video">
                        <source src="/api/chat/media/${message.id}" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                </div>`;
                break;
            case 'audio':
                messageContent += `<div class="message-media">
                    <audio controls class="media-audio">
                        <source src="/api/chat/media/${message.id}" type="audio/mpeg">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                    </audio>
                </div>`;
                break;
            case 'file':
                messageContent += `<div class="message-media">
                    <a href="/api/chat/media/${message.id}" download class="media-file">
                        üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                    </a>
                </div>`;
                break;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (message.content) {
        messageContent += `<div class="message-text">${message.content}</div>`;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    return `
        <div class="message ${messageClass}" data-message-id="${message.id}">
            <div class="message-content">
                ${messageContent}
                <div class="message-info">
                    <span class="message-time">${messageTime}</span>
                    ${readStatus}
                    ${message.is_edited ? '<span class="message-edited">(–∏–∑–º.)</span>' : ''}
                </div>
            </div>
        </div>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    if (!currentChatId) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    const messageInput = document.getElementById('message-input');
    const fileInput = document.getElementById('file-input');
    
    const messageText = messageInput.value.trim();
    const hasFile = fileInput.files && fileInput.files.length > 0;
    
    if (!messageText && !hasFile) {
        // –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        return;
    }
    
    // –°—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const messageCopy = messageText;
    messageInput.value = '';
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤
    const formData = new FormData();
    formData.append('content', messageCopy);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    if (hasFile) {
        formData.append('media', fileInput.files[0]);
        fileInput.value = '';
        document.querySelector('.selected-file').style.display = 'none';
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        const tempId = `temp-${Date.now()}`;
        const messagesContainer = document.querySelector('.messages-container');
        
        // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const tempMessage = document.createElement('div');
        tempMessage.className = 'message message-own sending';
        tempMessage.dataset.messageId = tempId;
        tempMessage.innerHTML = `
            <div class="message-content">
                <div class="message-text">${messageCopy}</div>
                <div class="message-info">
                    <span class="message-time">–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                    <span class="message-read-status">‚åõ</span>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        messagesContainer.appendChild(tempMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageCopy);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`/api/chat/${currentChatId}/send_message`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        
        if (data.success) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const tempMsgElement = document.querySelector(`[data-message-id="${tempId}"]`);
            
            if (data.message) {
                console.log('–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                
                if (tempMsgElement) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                    tempMsgElement.dataset.messageId = data.message.id;
                    tempMsgElement.classList.remove('sending');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                    const messageInfo = tempMsgElement.querySelector('.message-info');
                    if (messageInfo) {
                        const timeElement = messageInfo.querySelector('.message-time');
                        if (timeElement) {
                            timeElement.textContent = formatMessageTime(new Date(data.message.timestamp));
                        }
                        
                        const readStatusElement = messageInfo.querySelector('.message-read-status');
                        if (readStatusElement) {
                            readStatusElement.textContent = '‚úì';
                        }
                    }
                    
                    // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –º–µ–¥–∏–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    if (data.message.has_media && !tempMsgElement.querySelector('.message-media')) {
                        const messageContent = tempMsgElement.querySelector('.message-content');
                        const messageText = messageContent.querySelector('.message-text');
                        
                        // –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        let mediaHTML = '';
                        switch (data.message.media_type) {
                            case 'image':
                                mediaHTML = `<div class="message-media">
                                    <img src="/api/chat/media/${data.message.id}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="media-image">
                                </div>`;
                                break;
                            case 'video':
                                mediaHTML = `<div class="message-media">
                                    <video controls class="media-video">
                                        <source src="/api/chat/media/${data.message.id}" type="video/mp4">
                                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                                    </video>
                                </div>`;
                                break;
                            case 'audio':
                                mediaHTML = `<div class="message-media">
                                    <audio controls class="media-audio">
                                        <source src="/api/chat/media/${data.message.id}" type="audio/mpeg">
                                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                                    </audio>
                                </div>`;
                                break;
                            case 'file':
                                mediaHTML = `<div class="message-media">
                                    <a href="/api/chat/media/${data.message.id}" download class="media-file">
                                        üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                                    </a>
                                </div>`;
                                break;
                        }
                        
                        if (mediaHTML) {
                            // –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                            if (messageText) {
                                messageText.insertAdjacentHTML('beforebegin', mediaHTML);
                            } else {
                                messageContent.insertAdjacentHTML('afterbegin', mediaHTML);
                            }
                        }
                    }
                } else {
                    // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    const realMessageHTML = createMessageElement(data.message);
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = realMessageHTML;
                    
                    if (tempDiv.firstChild) {
                        messagesContainer.appendChild(tempDiv.firstChild);
                    } else {
                        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId
                if (data.message.id > (lastMessageId || 0)) {
                    lastMessageId = data.message.id;
                    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω lastMessageId: ${lastMessageId}`);
                }
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else {
                console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏');
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–æ —Å–∫–∞–∑–∞–ª —á—Ç–æ —É—Å–ø–µ—Ö,
                // –æ—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —É–±–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–ø—Ä–∞–≤–∫–∏"
                if (tempMsgElement) {
                    tempMsgElement.classList.remove('sending');
                    const readStatusElement = tempMsgElement.querySelector('.message-read-status');
                    if (readStatusElement) {
                        readStatusElement.textContent = '‚úì';
                    }
                    const timeElement = tempMsgElement.querySelector('.message-time');
                    if (timeElement) {
                        timeElement.textContent = formatMessageTime(new Date());
                    }
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => updateChatsList(), 300);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.message);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + data.message);
            
            // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫—É
            const tempMsgElement = document.querySelector(`[data-message-id="${tempId}"]`);
            if (tempMsgElement) {
                tempMsgElement.classList.add('error');
                tempMsgElement.querySelector('.message-time').textContent = '–û—à–∏–±–∫–∞';
                tempMsgElement.querySelector('.message-read-status').textContent = '‚ùå';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        messageInput.value = messageCopy;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function showNewMessagesIndicator(count) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    let indicator = document.querySelector('.new-messages-indicator');
    const chatInterface = document.querySelector('.chat-interface');
    
    if (!chatInterface) return;
    
    if (!indicator) {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        indicator = document.createElement('div');
        indicator.className = 'new-messages-indicator';
        indicator.textContent = `${count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Üì`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        indicator.addEventListener('click', function() {
            const messagesContainer = document.querySelector('.messages-container');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                indicator.remove();
            }
        });
        
        chatInterface.appendChild(indicator);
    } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        indicator.textContent = `${count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Üì`;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (indicator && indicator.parentElement) {
            indicator.remove();
        }
    }, 5000);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
function getMediaTypeFromFile(file) {
    if (!file) return null;
    const type = file.type;
    if (type.startsWith('image/')) return 'image';
    if (type.startsWith('video/')) return 'video';
    if (type.startsWith('audio/')) return 'audio';
    return 'file';
}

// –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π
function keepSessionAlive() {
    fetch('/api/ping', { 
        method: 'GET',
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
    }).catch(error => {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏
function handleSessionExpired() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (chatListUpdateInterval) clearInterval(chatListUpdateInterval);
    if (activeChatlUpdateInterval) clearInterval(activeChatlUpdateInterval);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'session-expired';
    notification.innerHTML = `
        <div class="session-message">
            <h3>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</h3>
            <p>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</p>
            <button id="relogin-btn">–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞</button>
        </div>
    `;
    document.body.appendChild(notification);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    document.getElementById('relogin-btn').addEventListener('click', () => {
        window.location.href = '/login';
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        window.location.href = '/login';
    }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function handleSelectedFile() {
    const fileInput = document.getElementById('file-input');
    const selectedFileInfo = document.querySelector('.selected-file');
    
    if (fileInput.files && fileInput.files.length > 0) {
        const file = fileInput.files[0];
        const fileName = file.name;
        const fileSize = formatFileSize(file.size);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        selectedFileInfo.innerHTML = `
            <div class="file-info">
                <span class="file-name">${fileName}</span>
                <span class="file-size">${fileSize}</span>
            </div>
            <button type="button" class="remove-file">‚úñ</button>
        `;
        selectedFileInfo.style.display = 'flex';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        selectedFileInfo.querySelector('.remove-file').addEventListener('click', function() {
            fileInput.value = '';
            selectedFileInfo.style.display = 'none';
        });
    } else {
        selectedFileInfo.style.display = 'none';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' –ë';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' –ö–ë';
    else return (bytes / 1048576).toFixed(2) + ' –ú–ë';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserActivity() {
    lastUserActivity = Date.now();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkUserActivity() {
    const now = Date.now();
    const inactivityThreshold = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    if (now - lastUserActivity > inactivityThreshold) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
function initGroupInfoModal() {
    const groupInfoModal = document.getElementById('group-info-modal');
    const groupInfoCloseBtn = document.getElementById('group-info-close-btn');
    const groupInfoSaveBtn = document.getElementById('group-info-save-btn');
    const exitGroupBtn = document.getElementById('exit-group-btn');
    const deleteGroupBtn = document.getElementById('delete-group-btn');
    const addMemberBtn = document.getElementById('add-member-btn');
    const groupPhotoInput = document.getElementById('group-info-photo-input');
    const photoOverlay = document.getElementById('group-photo-change-overlay');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    groupInfoCloseBtn?.addEventListener('click', function() {
        groupInfoModal.classList.remove('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    groupInfoModal?.addEventListener('click', function(e) {
        if (e.target === groupInfoModal) {
            groupInfoModal.classList.remove('active');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photoOverlay?.addEventListener('click', function() {
        if (isCurrentUserAdmin) {
            groupPhotoInput.click();
        }
    });
    
    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    groupPhotoInput?.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('group-info-preview-image').src = e.target.result;
            };
            reader.readAsDataURL(this.files[0]);
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
    groupInfoSaveBtn?.addEventListener('click', function() {
        saveGroupChanges();
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    addMemberBtn?.addEventListener('click', function() {
        openAddMembersModal();
    });
    
    // –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
    exitGroupBtn?.addEventListener('click', function() {
        if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É?')) {
            exitFromGroup(currentGroupId);
        }
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    deleteGroupBtn?.addEventListener('click', function() {
        if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            deleteGroup(currentGroupId);
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    initAddMembersModal();
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
async function openGroupInfoModal(groupId) {
    const groupInfoModal = document.getElementById('group-info-modal');
    const nameInput = document.getElementById('group-info-name');
    const descInput = document.getElementById('group-info-description');
    const membersCountSpan = document.getElementById('group-members-count');
    const membersList = document.getElementById('group-members-list');
    const creatorInfo = document.getElementById('group-creator-info');
    const saveBtn = document.getElementById('group-info-save-btn');
    const deleteBtn = document.getElementById('delete-group-btn');
    const photoOverlay = document.getElementById('group-photo-change-overlay');
    const addMemberBtn = document.getElementById('add-member-btn');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        membersList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã...</div>';
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await fetch(`/api/chat/group_info/${groupId}`);
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ');
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        const groupInfo = data.group_info;
        nameInput.value = groupInfo.name;
        descInput.value = groupInfo.description || '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const timestamp = new Date().getTime();
        document.getElementById('group-info-preview-image').src = `/api/chat/group_photo/${groupId}?t=${timestamp}`;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –≥—Ä—É–ø–ø—ã
        creatorInfo.innerHTML = `
            <div class="creator-avatar">
                <img src="/api/user/photo/${groupInfo.creator_id}?t=${timestamp}" 
                     alt="${groupInfo.creator_name}" 
                     onerror="this.src='/static/images/avatar.png'">
            </div>
            <div class="creator-name">${groupInfo.creator_name}</div>
        `;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const members = data.members;
        membersCountSpan.textContent = members.length;
        currentGroupMembers = members;
        
        let membersHTML = '';
        members.forEach(member => {
            const isAdmin = member.admin_level > 0;
            const isCreator = member.admin_level === 2;
            const isCurrentUser = member.user_id === data.current_user_id;
            
            membersHTML += `
                <div class="member-item" data-user-id="${member.user_id}">
                    <div class="member-avatar">
                        <img src="/api/user/photo/${member.user_id}?t=${timestamp}" 
                             alt="${member.nickname}" 
                             onerror="this.src='/static/images/avatar.png'">
                    </div>
                    <div class="member-info">
                        <div class="member-name">${member.nickname} ${isCurrentUser ? '(–í—ã)' : ''}</div>
                        <div class="member-role">${isCreator ? '–°–æ–∑–¥–∞—Ç–µ–ª—å' : (isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–£—á–∞—Å—Ç–Ω–∏–∫')}</div>
                    </div>
                    <div class="member-actions">
                        ${!isCurrentUser && data.is_admin && !isCreator ? `
                            <button class="member-action-btn member-admin-toggle" title="${isAdmin ? '–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'}" 
                                    data-action="toggle-admin" data-user-id="${member.user_id}">
                                ${isAdmin ? '‚≠ê' : '‚òÜ'}
                            </button>
                            <button class="member-action-btn" title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã" 
                                    data-action="remove" data-user-id="${member.user_id}">
                                ‚úñ
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        membersList.innerHTML = membersHTML || '<div class="no-results">–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        isCurrentUserAdmin = data.is_admin;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
        nameInput.readOnly = !isCurrentUserAdmin;
        descInput.readOnly = !isCurrentUserAdmin;
        saveBtn.style.display = isCurrentUserAdmin ? 'block' : 'none';
        photoOverlay.style.display = isCurrentUserAdmin ? 'flex' : 'none';
        deleteBtn.style.display = data.is_creator ? 'block' : 'none';
        addMemberBtn.style.display = isCurrentUserAdmin ? 'block' : 'none';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        document.querySelectorAll('.member-action-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const action = this.dataset.action;
                const userId = this.dataset.userId;
                
                if (action === 'remove') {
                    if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã?')) {
                        removeMemberFromGroup(currentGroupId, userId);
                    }
                } else if (action === 'toggle-admin') {
                    const isAdmin = this.textContent.trim() === '‚≠ê';
                    toggleMemberAdminStatus(currentGroupId, userId, !isAdmin);
                }
            });
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        groupInfoModal.classList.add('active');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ: ' + error.message);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
async function saveGroupChanges() {
    try {
        const nameInput = document.getElementById('group-info-name');
        const descInput = document.getElementById('group-info-description');
        const groupPhotoInput = document.getElementById('group-info-photo-input');
        const messageElement = document.getElementById('group-info-message');
        
        const formData = new FormData();
        formData.append('name', nameInput.value.trim());
        formData.append('description', descInput.value.trim());
        
        if (groupPhotoInput.files && groupPhotoInput.files[0]) {
            formData.append('group_photo', groupPhotoInput.files[0]);
        }
        
        const response = await fetch(`/api/chat/update_group/${currentGroupId}`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            messageElement.textContent = '–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞';
            messageElement.className = 'modal-message success';
            messageElement.style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            document.querySelector('.chat-header-title').textContent = nameInput.value.trim();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —á–∞—Ç–∞ —Å –Ω–æ–≤–æ–π –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
            const timestamp = new Date().getTime();
            const chatAvatar = document.getElementById('chat-avatar');
            if (chatAvatar) {
                chatAvatar.src = `/api/chat/group_photo/${currentGroupId}?t=${timestamp}`;
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 3000);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            updateChatsList();
            
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã:', error);
        const messageElement = document.getElementById('group-info-message');
        messageElement.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
        messageElement.className = 'modal-message error';
        messageElement.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            messageElement.style.display = 'none';
        }, 3000);
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
async function exitFromGroup(groupId) {
    try {
        const response = await fetch(`/api/chat/leave_group/${groupId}`, {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
            document.getElementById('group-info-modal').classList.remove('active');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            closeCurrentChat();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            updateChatsList();
            
            alert('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
async function deleteGroup(groupId) {
    try {
        const response = await fetch(`/api/chat/delete_group/${groupId}`, {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
            document.getElementById('group-info-modal').classList.remove('active');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            closeCurrentChat();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            updateChatsList();
            
            alert('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
async function removeMemberFromGroup(groupId, userId) {
    try {
        const response = await fetch(`/api/chat/remove_member/${groupId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user_id: userId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
            openGroupInfoModal(groupId);
            
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ' + error.message);
    }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function toggleMemberAdminStatus(groupId, userId, makeAdmin) {
    try {
        const response = await fetch(`/api/chat/toggle_admin/${groupId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                user_id: userId,
                make_admin: makeAdmin
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
            openGroupInfoModal(groupId);
            
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ' + error.message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function initAddMembersModal() {
    const addMembersModal = document.getElementById('add-members-modal');
    const closeBtn = document.getElementById('add-members-close-btn');
    const saveBtn = document.getElementById('add-members-save-btn');
    const searchInput = document.getElementById('add-members-search-input');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeBtn?.addEventListener('click', function() {
        addMembersModal.classList.remove('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    addMembersModal?.addEventListener('click', function(e) {
        if (e.target === addMembersModal) {
            addMembersModal.classList.remove('active');
        }
    });
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let searchTimeout;
    searchInput?.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        searchTimeout = setTimeout(() => {
            searchContacts(query);
        }, 300);
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
    saveBtn?.addEventListener('click', function() {
        addSelectedMembers();
    });
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function openAddMembersModal() {
    const addMembersModal = document.getElementById('add-members-modal');
    const selectedMembersList = document.getElementById('selected-members-list');
    const countSpan = document.getElementById('selected-add-members-count');
    
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    selectedMembersList.innerHTML = '';
    countSpan.textContent = '0';
    window.selectedNewMembers = [];
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    addMembersModal.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
    searchContacts('');
}

// –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async function searchContacts(query) {
    const resultsContainer = document.getElementById('add-members-results');
    const loadingIndicator = document.getElementById('add-members-loading');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingIndicator.style.display = 'block';
        resultsContainer.style.display = 'none';
        
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        const response = await fetch(`/api/chat/search_contacts?query=${encodeURIComponent(query)}`);
        const data = await response.json();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingIndicator.style.display = 'none';
        resultsContainer.style.display = 'block';
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if (data.contacts.length === 0) {
            resultsContainer.innerHTML = '<div class="no-results">–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø—É
        const existingMemberIds = currentGroupMembers.map(m => m.user_id.toString());
        const filteredContacts = data.contacts.filter(contact => 
            !existingMemberIds.includes(contact.id.toString())
        );
        
        if (filteredContacts.length === 0) {
            resultsContainer.innerHTML = '<div class="no-results">–í—Å–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ</div>';
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        let contactsHTML = '';
        filteredContacts.forEach(contact => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
            const isSelected = window.selectedNewMembers && 
                              window.selectedNewMembers.some(m => m.id === contact.id);
            
            contactsHTML += `
                <div class="contact-item ${isSelected ? 'selected' : ''}" 
                     data-user-id="${contact.id}" 
                     data-nickname="${contact.nickname}">
                    <div class="contact-avatar">
                        <img src="/api/user/photo/${contact.id}" 
                             alt="${contact.nickname}" 
                             onerror="this.src='/static/images/avatar.png'">
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">${contact.nickname}</div>
                    </div>
                    <div class="contact-select">
                        ${isSelected ? '‚úì' : ''}
                    </div>
                </div>
            `;
        });
        
        resultsContainer.innerHTML = contactsHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        document.querySelectorAll('#add-members-results .contact-item').forEach(item => {
            item.addEventListener('click', function() {
                const userId = this.dataset.userId;
                const nickname = this.dataset.nickname;
                toggleSelectedMember(userId, nickname, this);
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        loadingIndicator.style.display = 'none';
        resultsContainer.style.display = 'block';
        resultsContainer.innerHTML = `<div class="no-results">–û—à–∏–±–∫–∞: ${error.message}</div>`;
    }
}

// –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function toggleSelectedMember(userId, nickname, element) {
    if (!window.selectedNewMembers) {
        window.selectedNewMembers = [];
    }
    
    const selectedMembersList = document.getElementById('selected-members-list');
    const countSpan = document.getElementById('selected-add-members-count');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const index = window.selectedNewMembers.findIndex(m => m.id === userId);
    
    if (index === -1) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        window.selectedNewMembers.push({ id: userId, nickname: nickname });
        element.classList.add('selected');
        element.querySelector('.contact-select').textContent = '‚úì';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        const memberItem = document.createElement('div');
        memberItem.className = 'selected-member-item';
        memberItem.dataset.userId = userId;
        memberItem.innerHTML = `
            <span>${nickname}</span>
            <button class="remove-selected-member" data-user-id="${userId}">‚úï</button>
        `;
        selectedMembersList.appendChild(memberItem);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        memberItem.querySelector('.remove-selected-member').addEventListener('click', function() {
            const userId = this.dataset.userId;
            const contactItem = document.querySelector(`#add-members-results .contact-item[data-user-id="${userId}"]`);
            if (contactItem) {
                contactItem.classList.remove('selected');
                contactItem.querySelector('.contact-select').textContent = '';
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
            const index = window.selectedNewMembers.findIndex(m => m.id === userId);
            if (index !== -1) {
                window.selectedNewMembers.splice(index, 1);
            }
            
            // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            this.parentElement.remove();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            countSpan.textContent = window.selectedNewMembers.length;
        });
    } else {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        window.selectedNewMembers.splice(index, 1);
        element.classList.remove('selected');
        element.querySelector('.contact-select').textContent = '';
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const memberItem = selectedMembersList.querySelector(`.selected-member-item[data-user-id="${userId}"]`);
        if (memberItem) {
            memberItem.remove();
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    countSpan.textContent = window.selectedNewMembers.length;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
async function addSelectedMembers() {
    if (!window.selectedNewMembers || window.selectedNewMembers.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É');
        return;
    }
    
    try {
        const response = await fetch(`/api/chat/add_members/${currentGroupId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                user_ids: window.selectedNewMembers.map(m => m.id)
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            document.getElementById('add-members-modal').classList.remove('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
            openGroupInfoModal(currentGroupId);
            
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + error.message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.chatModule = {
    initChatComponent,
    openChat,
    closeCurrentChat,
    updateChatsList,
    getCurrentChatId,
    updateCurrentChatMessages,
    updateUserActivity,
    keepSessionAlive,
    openGroupInfoModal
};